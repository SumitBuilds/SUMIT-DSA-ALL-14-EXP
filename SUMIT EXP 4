#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_SIZE 5

int cqueue[MAX_SIZE];
int front = -1;
int rear = -1;

void insert(int item) {
    if ((front == 0 && rear == MAX_SIZE - 1) || (rear == (front - 1) % (MAX_SIZE - 1))) {
        printf("\nQueue Overflow - Circular Queue is Full.\n");
    } else {
        if (front == -1) {
            front = 0;
            rear = 0;
        } else if (rear == MAX_SIZE - 1 && front != 0) {
            rear = 0;
        } else {
            rear = rear + 1;
        }
        cqueue[rear] = item;
        printf("\nInserted %d.\n", item);
    }
}

void delete_item() {
    if (front == -1) {
        printf("\nQueue Underflow - Circular Queue is Empty.\n");
    } else {
        printf("\nDeleted element: %d\n", cqueue[front]);
        if (front == rear) { // Last element deleted
            front = -1;
            rear = -1;
        } else if (front == MAX_SIZE - 1) {
            front = 0;
        } else {
            front = front + 1;
        }
    }
}

void display() {
    if (front == -1) {
        printf("\nCircular Queue is Empty.\n");
        return;
    }
    printf("\nElements in Circular Queue are: ");
    int i = front;
    if (front <= rear) {
        while (i <= rear)
            printf("%d ", cqueue[i++]);
    } else {
        while (i < MAX_SIZE)
            printf("%d ", cqueue[i++]);
        i = 0;
        while (i <= rear)
            printf("%d ", cqueue[i++]);
    }
    printf("\n");
}

int main() {
    int choice, value;
    
    do {
        printf("\n--- Circular Queue Operations ---\n");
        printf("1. Insert\n2. Delete\n3. Display\n4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the value to insert: ");
                scanf("%d", &value);
                insert(value);
                break;
            case 2:
                delete_item();
                break;
            case 3:
                display();
                break;
            case 4:
                printf("Exiting program.\n");
                break;
            default:
                printf("Invalid choice! Please try again.\n");
        }
    } while (choice != 4);

    // Final fix for terminal pause:
    printf("\n\n*** Press ENTER to exit... ***");
    int c;
    while ((c = getchar()) != '\n' && c != EOF) {} // Clear buffer
    getchar(); // Wait for user keypress
    
    return 0;
}
