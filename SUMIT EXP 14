#include <stdio.h>

#define MAX 20

int arr[MAX]; // Array to store the elements
int original_arr[MAX]; // Array to store the original elements for reuse
int n = 0; // Number of elements

// --- Helper Functions ---

// Function to read the elements from the user
void readElements() {
    int i, c;
    
    printf("Enter number of elements (max %d): ", MAX);
    if (scanf("%d", &n) != 1) n = 0;
    while ((c = getchar()) != '\n' && c != EOF) {}
    
    if (n <= 0 || n > MAX) {
        printf("Invalid number of elements. Setting count to 0.\n");
        n = 0;
        return;
    }
    
    printf("Enter elements (space separated):\n");
    for (i = 0; i < n; i++) {
        if (scanf("%d", &original_arr[i]) != 1) {
            printf("Invalid input. Stopping input.\n");
            n = i;
            break;
        }
    }
    while ((c = getchar()) != '\n' && c != EOF) {}
}

// Function to copy the original array into the working array
void setupArray() {
    for (int i = 0; i < n; i++) {
        arr[i] = original_arr[i];
    }
}

// Function to display the array
void display(const char *sortName) {
    if (n == 0) {
        printf("Array is empty.\n");
        return;
    }
    
    printf("Sorted Array (%s): ", sortName);
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// Function to swap two numbers
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// --- 1. Merge Sort Implementation ---

// Merges two subarrays of arr[]. First subarray is arr[l..m], second is arr[m+1..r]
void merge(int array[], int l, int m, int r) {
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;

    // Create temp arrays
    int L[n1], R[n2];

    // Copy data to temp arrays L[] and R[]
    for (i = 0; i < n1; i++)
        L[i] = array[l + i];
    for (j = 0; j < n2; j++)
        R[j] = array[m + 1 + j];

    // Merge the temp arrays back into arr[l..r]
    i = 0; // Initial index of first subarray
    j = 0; // Initial index of second subarray
    k = l; // Initial index of merged subarray
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            array[k] = L[i];
            i++;
        } else {
            array[k] = R[j];
            j++;
        }
        k++;
    }

    // Copy the remaining elements of L[], if any
    while (i < n1) {
        array[k] = L[i];
        i++;
        k++;
    }

    // Copy the remaining elements of R[], if any
    while (j < n2) {
        array[k] = R[j];
        j++;
        k++;
    }
}

// l is for left index and r is right index of the sub-array of arr to be sorted
void mergeSort(int array[], int l, int r) {
    if (l < r) {
        // Find the middle point
        int m = l + (r - l) / 2;

        // Sort first and second halves
        mergeSort(array, l, m);
        mergeSort(array, m + 1, r);

        // Merge the sorted halves
        merge(array, l, m, r);
    }
}

// --- 2. Quick Sort Implementation ---

// Partition function (Hoare's or Lomuto's) - using Lomuto's Partition Scheme
int partition(int array[], int low, int high) {
    int pivot = array[high]; // Pivot is the last element
    int i = (low - 1); // Index of smaller element

    for (int j = low; j <= high - 1; j++) {
        // If current element is smaller than the pivot
        if (array[j] < pivot) {
            i++; // Increment index of smaller element
            swap(&array[i], &array[j]);
        }
    }
    swap(&array[i + 1], &array[high]);
    return (i + 1);
}

// Function to implement Quick Sort
void quickSort(int array[], int low, int high) {
    if (low < high) {
        // pi is partitioning index, arr[pi] is now at right place
        int pi = partition(array, low, high);

        // Separately sort elements before partition and after partition
        quickSort(array, low, pi - 1);
        quickSort(array, pi + 1, high);
    }
}


int main() {
    int choice, c;
    
    // Initial read of elements
    readElements(); 

    do {
        printf("\n--- Menu ---\n");
        printf("1. Merge Sort\n2. Quick Sort\n3. Exit\n");
        printf("Enter your choice: ");
        
        if (scanf("%d", &choice) != 1) choice = 0;
        while ((c = getchar()) != '\n' && c != EOF) {}

        if (n == 0 && choice != 3) {
            printf("Error: Array is empty. Please restart or initialize a non-empty array.\n");
            choice = 0;
            continue;
        }

        switch (choice) {
            case 1:
                setupArray();
                mergeSort(arr, 0, n - 1);
                display("Merge Sort");
                break;
            case 2:
                setupArray();
                quickSort(arr, 0, n - 1);
                display("Quick Sort");
                break;
            case 3:
                printf("Exiting program.\n");
                break;
            default:
                printf("Invalid choice.\n");
        }
    } while (choice != 3);

    // Terminal pause logic
    printf("\n\n*** Program Finished. Press ENTER to close the terminal. ***");
    while ((c = getchar()) != '\n' && c != EOF) {}
    getchar();
    return 0;
}
