#include <stdio.h>
#include <stdlib.h>

struct node {
    int key;
    struct node *left;
    struct node *right;
    int height;
};

// --- Helper Functions ---

int height(struct node *N) {
    if (N == NULL) return 0;
    return N->height;
}

int max(int a, int b) {
    return (a > b) ? a : b;
}

struct node* newNode(int key) {
    struct node* node = (struct node*)malloc(sizeof(struct node));
    if (node == NULL) {
        printf("Memory allocation failed!\n");
        exit(1);
    }
    node->key = key;
    node->left = node->right = NULL;
    node->height = 1;
    return node;
}

int getBalance(struct node *N) {
    if (N == NULL) return 0;
    return height(N->left) - height(N->right);
}

// Function to find the node with the minimum value (Inorder Successor)
struct node* minValueNode(struct node* node) {
    struct node* current = node;
    while (current && current->left != NULL)
        current = current->left;
    return current;
}

// --- Rotation Functions ---

struct node *rightRotate(struct node *y) {
    struct node *x = y->left;
    struct node *T2 = x->right;

    x->right = y;
    y->left = T2;

    y->height = max(height(y->left), height(y->right)) + 1;
    x->height = max(height(x->left), height(x->right)) + 1;
    
    printf("\n  [INFO: Right Rotation performed on %d]\n", y->key);

    return x;
}

struct node *leftRotate(struct node *x) {
    struct node *y = x->right;
    struct node *T2 = y->left;

    y->left = x;
    x->right = T2;

    x->height = max(height(x->left), height(x->right)) + 1;
    y->height = max(height(y->left), height(y->right)) + 1;

    printf("\n  [INFO: Left Rotation performed on %d]\n", x->key);

    return y;
}

// --- 1. Insertion Function ---

struct node* insert(struct node* node, int key) {
    // 1. Standard BST insertion
    if (node == NULL) return newNode(key);

    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);
    else return node; // Duplicate keys not allowed

    // 2. Update height
    node->height = 1 + max(height(node->left), height(node->right));

    // 3. Get the balance factor
    int balance = getBalance(node);

    // 4. Handle Imbalances (Rotations)
    if (balance > 1 && key < node->left->key) // LL Case
        return rightRotate(node);

    if (balance < -1 && key > node->right->key) // RR Case
        return leftRotate(node);

    if (balance > 1 && key > node->left->key) { // LR Case
        node->left = leftRotate(node->left);
        return rightRotate(node);
    }

    if (balance < -1 && key < node->right->key) { // RL Case
        node->right = rightRotate(node->right);
        return leftRotate(node);
    }

    return node;
}

// --- 2. Deletion Function ---

struct node* deleteNode(struct node* root, int key) {
    if (root == NULL) return root;

    // 1. Standard BST Deletion Traversal
    if (key < root->key)
        root->left = deleteNode(root->left, key);
    else if (key > root->key)
        root->right = deleteNode(root->right, key);
    else { // Node found
        // Case 1 & 2: 0 or 1 child
        if ((root->left == NULL) || (root->right == NULL)) {
            struct node *temp = root->left ? root->left : root->right;
            if (temp == NULL) { // 0 children
                temp = root;
                root = NULL;
            } else { // 1 child
                *root = *temp; 
            }
            free(temp);
        } else {
            // Case 3: 2 children - Get Inorder Successor
            struct node* temp = minValueNode(root->right);
            root->key = temp->key;
            root->right = deleteNode(root->right, temp->key); // Delete the successor
        }
    }

    if (root == NULL) return root; // If only one node and it was deleted

    // 2. Update height
    root->height = 1 + max(height(root->left), height(root->right));

    // 3. Get the balance factor
    int balance = getBalance(root);

    // 4. Handle Rebalancing (same logic as insertion)

    // LL Case
    if (balance > 1 && getBalance(root->left) >= 0)
        return rightRotate(root);

    // LR Case
    if (balance > 1 && getBalance(root->left) < 0) {
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }

    // RR Case
    if (balance < -1 && getBalance(root->right) <= 0)
        return leftRotate(root);

    // RL Case
    if (balance < -1 && getBalance(root->right) > 0) {
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }

    return root;
}


// --- 3. Traversal Function ---

// Inorder Traversal (LNR: Left -> Node -> Right - prints sorted list)
void inorder(struct node* root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d (h:%d) ", root->key, root->height);
        inorder(root->right);
    }
}

int main() {
    struct node *root = NULL;
    int choice, value, c;

    do {
        printf("\n--- AVL Tree Menu ---\n");
        printf("1. Insert\n2. Delete\n3. Inorder Traversal (Key & Height)\n4. Exit\n");
        printf("Enter choice: ");
        
        if (scanf("%d", &choice) != 1) choice = 0;
        while ((c = getchar()) != '\n' && c != EOF) {}

        switch (choice) {
            case 1:
                printf("Enter value to insert: ");
                scanf("%d", &value);
                while ((c = getchar()) != '\n' && c != EOF) {}
                root = insert(root, value);
                printf("Inserted %d.\n", value);
                break;
            case 2:
                printf("Enter value to delete: ");
                scanf("%d", &value);
                while ((c = getchar()) != '\n' && c != EOF) {}
                root = deleteNode(root, value);
                printf("Deletion operation for %d completed (if present).\n", value);
                break;
            case 3:
                printf("\nInorder Traversal (Key and Height): ");
                inorder(root);
                printf("\n");
                break;
            case 4:
                printf("Exiting program.\n");
                break;
            default:
                printf("Invalid choice.\n");
        }
    } while (choice != 4);

    // Terminal pause logic
    printf("\n\n*** Program Finished. Press ENTER to close the terminal. ***");
    while ((c = getchar()) != '\n' && c != EOF) {}
    getchar();
    return 0;
}
