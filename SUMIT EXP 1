#include <stdio.h>
#include <stdlib.h>

// --- Structure for a Stack Node ---
struct Node {
    int data;
    struct Node* next;
};

// Global pointer to the top of the stack
struct Node* top = NULL;

// --- Function Prototypes ---
void push(int value);
int pop();
int peek();
void display();
void stack_menu();

// --- 1. PUSH Operation (Adding an element) ---
void push(int value) {
    // 1. Allocate memory for a new node
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));

    // Check if memory allocation was successful (Stack Overflow check)
    if (newNode == NULL) {
        printf("\nStack Overflow! Cannot push %d.\n", value);
        return;
    }

    // 2. Set the data of the new node
    newNode->data = value;

    // 3. The new node's 'next' pointer points to the current 'top'
    newNode->next = top;

    // 4. Update 'top' to be the new node
    top = newNode;

    printf("%d pushed to stack\n", value);
}

// --- 2. POP Operation (Removing the top element) ---
int pop() {
    int poppedValue;
    struct Node* temp;

    // Check for Stack Underflow (Empty Stack)
    if (top == NULL) {
        printf("\nStack Underflow! Cannot pop from an empty stack.\n");
        return -1; // Return -1 or a sentinel value indicating error
    }

    // 1. Store the data of the top node
    poppedValue = top->data;

    // 2. Store the current top node in a temporary pointer
    temp = top;

    // 3. Move 'top' to the next node
    top = top->next;

    // 4. Free the memory of the popped node
    free(temp);

    return poppedValue;
}

// --- 3. PEEK Operation (Viewing the top element) ---
int peek() {
    if (top == NULL) {
        printf("\nStack is Empty. Cannot peek.\n");
        return -1;
    }
    return top->data;
}

// --- 4. DISPLAY Operation (Printing all elements) ---
void display() {
    struct Node* current = top;

    if (top == NULL) {
        printf("\nStack is Empty.\n");
        return;
    }

    printf("Stack elements: ");
    // Traverse the list from top to bottom
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}

// --- Stack Menu Function ---
void stack_menu() {
    printf("\n--- Stack Menu ---\n");
    printf("1. Push\n");
    printf("2. Pop\n");
    printf("3. Peek\n");
    printf("4. Display\n");
    printf("5. Exit\n");
}

// --- Main Function ---
int main() {
    int choice, value;

    while (1) {
        stack_menu();
        printf("Enter your choice: ");
        if (scanf("%d", &choice) != 1) {
            // Handle non-integer input
            printf("Invalid input. Please enter a number.\n");
            while(getchar() != '\n'); // Clear input buffer
            continue;
        }

        switch (choice) {
            case 1:
                printf("Enter value to push: ");
                if (scanf("%d", &value) != 1) {
                    printf("Invalid input.\n");
                    while(getchar() != '\n');
                    continue;
                }
                push(value);
                break;
            case 2:
                value = pop();
                if (value != -1) {
                    printf("%d popped from stack\n", value);
                }
                break;
            case 3:
                value = peek();
                if (value != -1) {
                    printf("Top element is: %d\n", value);
                }
                break;
            case 4:
                display();
                break;
            case 5:
                printf("Exiting program.\n");
                // In a real program, you'd free all nodes before exiting
                exit(0);
            default:
                printf("Invalid choice. Please enter a number between 1 and 5.\n");
        }
    }
    return 0;
}
